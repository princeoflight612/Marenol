<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>objPEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
numCherries = 1 //Number of cherries in the circle
dt = 1/800 //Time increment, where 1t = 1 cycle. In the default case, one cycle is 200 frames. (4 seconds)
phaseOffset=0;
phaseSpeed=1;
motion = 1 //Motion setting: 1 = normal circle, 2 = loop back to center, 3 = complex circle, 4 = swaying circle
radius = 0; //Maximum distance of the cherries from the center

t = 0
init=false;
circleID=0;
lineBullets=0;
initBulletAngle=-90;
bulletID=objP3DBullet;
rotationAngle=180//random(360);
rotationSpeed=0.1//random_range(-0.1,0.1);
frozen=false;
slowdown=false;

killer=false;
image_alpha=1.0;

baseScale=1.0;

z=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up all cherries
if(init)
for (var i=0; i&lt;numCherries; i++) {
    var ct = t+i/numCherries // individual cherry's time
    var r = radius
    var a = ct*360
    if(instance_exists(cherries[i])){
        with(cherries[i]){ 
            /*
            var spr=sprite_index;
            with(instance_create(x,y,objAvoidance3DBulletFree)){
                sprite_index=spr;
                bulletID=irandom(2);
                killer=other.killer;
            }
            */
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Calculate radius and angle based on timer and radius
// Then move each cherry to that location
// Code ported from Collect the Pixels
if(frozen) exit;
phaseOffset+=phaseSpeed;
rotationAngle+=rotationSpeed;
if(!init){
    init=true;
    for (var i=0; i&lt;numCherries; i++) {
        cherries[i] = instance_create(x, y, bulletID)
        //cherries[i].sprite_index = sprite_index
        cherries[i].depth = -5
        cherries[i].image_alpha=0;
    }
}

radius=image_xscale;
for (var i=0; i&lt;numCherries; i++) {
    if(instance_exists(cherries[i])){
        var ct = t+i/numCherries // individual cherry's time
        var r = radius
        var a = ct*360
        var r2=r/5;
        
        // normal circle
        if motion == 1 {
            r = radius
            a = ct*360
        }
        // loop back to center
        else if motion == 2 {
            r = radius*sin(t*pi*4)
            a = ct*360
        }
        // complex circle
        else if motion == 3 {
            r = radius
            a = 360*sin(degtorad(a))
        }
        // swaying circle
        else if motion == 4 {
            r = radius
            a = ct*360 + 30*sin(degtorad(a*numCherries))
        }
        
        // Move cherries
        var baseX=lengthdir_x(r, a);
        var baseY=lengthdir_y(r*dcos(phaseOffset), a);
        
        cherries[i].x = x+baseX*dcos(rotationAngle)+baseY*dsin(rotationAngle); // apply rotation
        cherries[i].y = y+baseX*dsin(rotationAngle)-baseY*dcos(rotationAngle);
        cherries[i].z = z+r*dcos(a-90)*dsin(phaseOffset)
        cherries[i].baseAlpha=image_alpha;
        cherries[i].killer=killer;
        cherries[i].r = radius;
        cherries[i].baseScale=baseScale;
        
    } 
}
t += dt
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
