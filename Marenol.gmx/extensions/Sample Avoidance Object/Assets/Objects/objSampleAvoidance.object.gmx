<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sample avoidance code by Princeoflight
//Works in YoYoYo-based environment
//Some code taken from Shift engine


musicID=musGuyRock //Music used

t=0;
side=choose(-1,1);

RealStep=0;


BEAT_TIME=0.381*50; //BEAT_TIME = time between beats. Use Audacity or a BPM detection tool to set it
BEAT_TIME=0.248*50;

enum sampleAvoidanceAttacks {
    INTRO,
    END,
    NUM_ATTACKS
}

numTimings=sampleAvoidanceAttacks.NUM_ATTACKS;

timings[sampleAvoidanceAttacks.INTRO]=0;
timings[sampleAvoidanceAttacks.END]=floor(16*BEAT_TIME);
timings[sampleAvoidanceAttacks.NUM_ATTACKS]=10000000;

attack=0;

debugSnaps[0]=0;
numDebugSnaps=0;
t=0;
t_music=0;
finish=false;


startTiming=0;
endTiming=floor(audio_sound_length(musicID)*50);

scrPlayMusic(musicID,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Anti-desync - set RealStep according to music time


RealStep += room_speed * delta_time / 1000000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increment timer, sync to music
if(!instance_exists(objPlayer)||finish) exit;
t++;
t_music=t;
//Anti-desync taken from Shift Engine.

if(t &gt; 0){
    var music_t = audio_sound_get_track_position(global.currentMusic) * 50;
    if(abs(t_music - music_t) &gt; 5){
        audio_sound_set_track_position(global.currentMusic,t_music / 50);
    }
}

if(t&gt;timings[attack+1]){
    if(t&gt;7800||t==numTimings-1){
        instance_destroy();
    }else{
        attack++;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug timeline

if(global.debugMode){
    if(keyboard_check_pressed(vk_space)){
        debugSnaps[numDebugSnaps]=t;
        numDebugSnaps++;
    }
    if(point_in_rectangle(mouse_x,mouse_y,32,0,room_width-32,64)&amp;&amp;mouse_check_button_pressed(mb_left)){
        var trackPos=lerp(startTiming,endTiming,(mouse_x-32)/(room_width-64))
        audio_sound_set_track_position(global.currentMusic,trackPos/50);
        t=floor(trackPos);
        for(var i=0;i&lt;array_length_1d(timings);i++){
            if(trackPos*50&gt;timings[i]){
                attack=i;
                break;       
            }
        }
        with(obj404Entity) {
            if(!child)
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacks
var ct=t-timings[attack];
var BT=BEAT_TIME;


switch(attack){ //Main attack loop
    case sampleAvoidanceAttacks.INTRO:
    {
        if(ct mod floor(BT)==1){ //Sample attack format. Spawn bullets every beat
        //Always floor the BT otherwise the code won't work
            var obj=instance_create_ext(400,304,obj404Bullet,6,random(360),random_range(0.8,1.2),1);
        }   
        
        with(obj404Bullet){ //Example of the tag system. Define bullet behaviour depending on the tag
            if(tag==1){ //All bullets with the variable tag assigned to 1 are set to curve
                direction+=1;
            }
        }
        break;
    }
    case sampleAvoidanceAttacks.END:
    {
        
        break;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug timeline
if(global.debugMode){
    draw_set_alpha(1);
    draw_set_colour(c_white);
    draw_rectangle_colour(32,32,room_width-32,48,c_black,c_black,c_black,c_black,0);
    var barPosition=lerp(32,room_width-32,(t-startTiming)/(endTiming-startTiming));
    draw_rectangle_colour(barPosition-4,32+8-16,barPosition+4,32+8+16,c_white,c_white,c_white,c_white,0);
    for(var i=0;i&lt;numTimings;++i){
        var markPosition=lerp(32,room_width-32,(timings[i]-startTiming)/(endTiming-startTiming));
        draw_rectangle_colour(markPosition-2,32+8-16,markPosition+2,32+8+16,c_white,c_white,c_white,c_white,0);
    }
    draw_set_font(fDefault12);
    draw_set_colour(c_white);
    draw_text(room_width-64,64,t);
    var spacing=32;
    for(var i=0;i&lt;numDebugSnaps;++i){
        draw_text(room_width-64,64+spacing*(i+1),debugSnaps[i]);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
